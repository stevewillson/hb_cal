<%
function drawHeaderRow (calStartDate, calEndDate, cellWidth) {
  // assign the day values of the weekday to print them on the table header
  const weekday = ['S', 'M', 'T', 'W', 'T', 'F', 'S']

  let headerRow = ''
  headerRow += '<tr>\n'
  headerRow += '<th style="width: ' + (cellWidth * 2) + 'px;">\n'
  headerRow += 'Category\n'
  headerRow += '</th>\n'

  // draw additional columns, will be end date - start date columns wide
  for (let m = new Moment(calStartDate).startOf('days'); m.diff(calEndDate, 'days') <= 0; m.add(1, 'days')) {
    // for the header row, display the date number and the day of the week
    const d = m.date()
    const n = weekday[m.day()]
    const curDay = Moment().startOf('days')

    // highlight the current day in the top
    let cellStyle = ''
    if (m.isSame(curDay, 'days')) {
      cellStyle += 'background-color: #AAAAAA;'
    }
    headerRow += '<th data-date="' + m.format('YYYY-MM-DD') + '" style="width: ' + cellWidth + 'px; ' + cellStyle + '">\n'
    headerRow += d + ' ' + n + '\n'
    headerRow += '</th>\n'
  }

  headerRow += '</tr>'
  return headerRow
}

function drawCalendar (calStartDate, calEndDate, cellWidth, calName) {
  const tableName = calName + 'Table'
  const tableWidth = cellWidth * (calEndDate.diff(calStartDate, 'days') + 3)
  let cal = '<div id="' + calName + '" >\n'
  cal += '<table id="' + tableName + '" style="width: ' + tableWidth + 'px; table-layout: fixed; border: 1px solid black;">\n'

  // add the header row in here
  cal += drawHeaderRow(calStartDate, calEndDate, cellWidth)

  cal += '</table>\n'
  cal += '</div>\n'
  return cal
}

// START OF SCRIPT EXECUTION
// check for cookie values to set an arbitrary start date, stop date, and cellWidth
try {
  var calStartDate = new Moment(calView.startDate).startOf('day')
  if (!calStartDate.isValid()) throw new Error('Invalid Date: calStartDate')
  if (calView.startDate === undefined) throw new Error('startDate undefined')
} catch (err) {
  calStartDate = new Moment().startOf('day')
}

try {
  var calEndDate = new Moment(calView.endDate).startOf('day')
  if (!calEndDate.isValid()) throw new Error('Invalid Date: calEndDate')
  if (calView.endDate === undefined) throw new Error('endDate undefined')
  if (calEndDate.isSame(calStartDate)) throw new Error('endDate same as startDate')
} catch (err) {
  calEndDate = calStartDate.clone().add(30, 'days')
}

try {
  var cellWidth = calView.cellWidth
  if (cellWidth === undefined) throw new Error('cellWidth is undefined')
  if (isNaN(cellWidth)) throw new Error('cellWidth is NaN')
  if (cellWidth === '') throw new Error('cellWidth is empty')
} catch (err) {
  cellWidth = 50
}

// need to pass an array of the rows to draw, should be deduplicated
//var hbCalTable = drawCalendar(calStartDate, calEndDate, cellWidth, 'hbCal')
var hbCalTable = ''

%>
<script>

// CLIENT SIDE CODE EXECUTION
// change this to be the endpoint for the 'event' API
// get from a configuration file
// eventRequestURLEndpoint passed in through the 'render', defined in config.js file
var eventRequestURLEndpoint = "<%= eventRequestURLEndpoint %>"
var orgRequestURLEndpoint = "<%= orgRequestURLEndpoint %>"

// get a list of all the events




// code to load the full calendar after the page loads
document.addEventListener('DOMContentLoaded', () => {
	var calCategoryRows = []
	var fullCalEvents = []
	readCalEvents().then((events) => {
		let categories = []
		let iter = 'a'
		for (let event of events) {
			if (!categories.includes(event.category)) {
				categories.push(event.category)
			}
			fullCalEvents.push({ id: iter, resourceId: event.category, title: event.summary, start: moment(event.dtstart).utc().format('YYYY-MM-DD'), end: moment(event.dtend).utc().format('YYYY-MM-DD')})
			iter = String.fromCharCode(iter.charCodeAt(0) + 1)
		}
    for (let category of categories) {
			calCategoryRows.push({ id: category, title: category })
		}

		var calendarEl = document.getElementById('calendar')
		var calendar = new FullCalendar.Calendar(calendarEl, {
			plugins: [ 'interaction', 'resourceTimeline' ],
			timeZone: 'UTC', 
			defaultView: 'resourceTimelineMonth',
			editable: true,
			// populate the resources with the list of categories for the events
			resources: calCategoryRows,
			events: fullCalEvents,
			contentHeight: "auto"
		})
		calendar.updateSize()
		calendar.render()
	})
})

// TODO move to generate the calendar client side so there is only 1 request to the api/event endpoint
// if I generate the calendar after the api request, now move to add more functionality, can I resize the event columns to accomodate the events?

// layoutArea will be an array that contains tuples of areas that are currently occupied on the screen, it will be the upper left corner of the box
// for multiday events, the upper left corner of that cell will be added to the array
var layoutArea = []

document.addEventListener('readystatechange', event => {
  if (event.target.readyState === 'interactive') {
    //readCalEvents()
  }
})

// do an async read, build the table once the page is ready to be manipulated

// add the events to the server-rendered hb_cal table
function drawCalEvent (startDate, endDate, eventSummary, eventCategory, eventType, id, layoutArea) {
  // get the location of the start and the location of the end
  try {
    var elmnt = document.getElementById(eventCategory + '-' + startDate)
    var elmntWidth = elmnt.offsetWidth
    if (elmnt === null) throw new Error('elmnt is null')
  } catch (err) {
    // the start of the event is not in the view window
    // console.log('Cannot access the event: ' + err)
    return
  }
  const calEvent = document.createElement('div')
  const hbCal = document.getElementById('hbCal')
  const hbCalOffsetTop = hbCal.offsetTop
  const hbCalOffsetLeft = hbCal.offsetLeft

  calEvent.style.position = 'absolute'
  calEvent.style.border = '1px solid black'
  calEvent.style.textAlign = 'center'

  // add 5px to the top to offset the cell from the top border
  let topLocation = hbCalOffsetTop + elmnt.offsetTop + 5

  const leftLocation = hbCalOffsetLeft + elmnt.offsetLeft + 2
  calEvent.style.top = topLocation + 'px'
  calEvent.style.left = leftLocation + 'px'

  // prior to drawing the events, sort them by the category..., alphabetically

  // check if the layoutArea includes the particular place to draw this item
  for (var i = 0; i < layoutArea.length; i++) {
    if (leftLocation === layoutArea[i].left && topLocation === layoutArea[i].top) {
      // the box will be drawn where a square already exists
      // add a rowHeight value to the row
      const categoryRow = document.getElementById('category-' + eventCategory)
      // get the current height, if "" then set to 60
      let categoryRowHeight = parseInt(categoryRow.style.height, 10)
      if (isNaN(categoryRowHeight)) {
        // there are two events that need to occupy this row now
        categoryRowHeight = 60
      } else {
        // there are more than two events that need to occupy this row
        categoryRowHeight += 30
      }
      categoryRow.style.height = categoryRowHeight + 'px'
      topLocation += 30
      calEvent.style.top = topLocation + 'px'
    }
  }
  layoutArea.push({ left: leftLocation, top: topLocation })

  let eventTextContent = ''
  eventTextContent += '<form name="formUpdateCalEvent" style="display: inline;" >\n'
  eventTextContent += '<input type="button" class="linkButton" onclick="retrieveUpdateCalEvent(\'' + id + '\')" value="' + eventSummary + '" \\>\n'
  eventTextContent += '</form>\n'
  eventTextContent += '<form name="formDeleteCalEvent" style="display: inline;" >\n'
  eventTextContent += '<input type="button" class="linkButton" onclick="deleteCalEvent(\'' + id + '\')" value="Del" \\>\n'
  eventTextContent += '</form>\n'

  calEvent.innerHTML = eventTextContent

  calEvent.className = eventType

  // make the width of the box until the end of the event, also check to see if the event goes over the edge of the calendar

  // get the endDate of the cell, or if the endDate is null the last date of the calendar
  let cellWidth = ''

  // determine if the end cell is on the display area, if not, determine the farthest right offset for the row and then draw the cell to that right end
  try {
    const endElmnt = document.getElementById(eventCategory + '-' + endDate)
    if (endElmnt === null) throw new Error('endElmnt is null')
    // make the width the cell width plus the difference between the left offset of the first cell to the left offset of the second cell
    cellWidth = endElmnt.offsetLeft - elmnt.offsetLeft + parseInt(elmnt.offsetWidth, 10) - 5
  } catch (err) {
    // the end of the event is not in the view window
    const hbCalTable = document.getElementById('hbCalTable')
    const hbCalTableWidth = parseInt(hbCalTable.offsetWidth, 10)
    cellWidth = hbCalTableWidth - elmnt.offsetLeft - 4
    // console.log('Cannot access the event: ' + err)
  }
  // add values for the cellWidth to the array, take each cellWidth and add multiples of that to the layoutArea
  calEvent.style.width = cellWidth + 'px'
  const finalLeftPosition = leftLocation + cellWidth
  for (var layoutIter = leftLocation; layoutIter < finalLeftPosition; layoutIter += parseInt(elmntWidth, 10)) {
    layoutArea.push({ left: layoutIter, top: topLocation })
  }
  hbCal.appendChild(calEvent)
}

function processCalEventsForDisplay (calEvents) {
  // loop through the events here to add them to the calendar
  for (let event of calEvents) {
    // use the utc() method to get the utc date, hb_cal currently stores dates in utc
    const startDate = new moment(event.dtstart).utc().startOf('day').format('YYYY-MM-DD')
    const endDate = new moment(event.dtend).utc().startOf('day').format('YYYY-MM-DD')

    const eventSummary = event.summary
    const eventCategory = event.category
    const eventType = event.type
    const eventId = event._id

    drawCalEvent(startDate, endDate, eventSummary, eventCategory, eventType, eventId, layoutArea)
  }
}

// read events from the database once the page loads
async function readCalEvents () {
  // use the 'fetch' method to read the information
  const requestURL = eventRequestURLEndpoint
  let response = await fetch(requestURL)
  let calEvents = await response.json()
  return calEvents
  // addCategoryRows(calEvents)
  // processCalEventsForDisplay(calEvents)
}


// FUNCTIONS FOR DRAWING THE CALENDAR

function addCategoryRows (events) {
  let calCategoryRows = []
  for (let event of events) {
    if (!calCategoryRows.includes(event.category)) {
      calCategoryRows.push(event.category)
      drawCalCategoryRow(event.category, 'hbCalTable')
    }
  }
}

function drawCalCategoryRow (rowname, targetTable) {
  let calTable = document.getElementById(targetTable)
  let categoryRow = calTable.insertRow(-1)
  categoryRow.style.height = "30px"
  categoryRow.id = 'category-' + rowname

  // set the far left cell to be the categoryNameCell, create others but make them all blank
  let categoryNameCell = categoryRow.insertCell(0)
  categoryNameCell.innerHTML = rowname

  // get the date that hte cell starts on and use that to create the 'id' for the category row cells
  let curCalDate = moment(calTable.rows[0].cells[1].getAttribute('data-date')).startOf('days')
  let curDate = moment().utc().startOf('days')

  for (let i = 1; i < calTable.rows[0].cells.length; i++) {
    let insertedCell = categoryRow.insertCell(i)
    insertedCell.id = rowname + '-' + curCalDate.format('YYYY-MM-DD')
    if (curCalDate.isSame(curDate, 'days')) {
      insertedCell.style.backgroundColor = '#AAAAAA'
    }
    curCalDate.add(1, 'days')
  }
}

// FUNCTIONS FOR INTERACTING WITH ENDPOINTS

async function deleteCalEvent (eventId) {
  const requestURL = eventRequestURLEndpoint

  const delEventId = { documentid: eventId }

  const delOptions = {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(delEventId)
  }
  
  let response = await fetch(requestURL, delOptions)

  // find a way to remove just the event from the table so the entire table doesn't need to be redrawn
  location.reload(true)
}

async function createCalEvent () {
  const eventInfo = {
    eventCategory: document.getElementById('eventCategory').value,
    eventTitle: document.getElementById('eventTitle').value,
    eventType: document.getElementById('eventType').value,
    eventStartDate: document.getElementById('createCalEventStartDate').value,
    eventEndDate: document.getElementById('createCalEventEndDate').value,
    eventLocation: document.getElementById('eventLocation').value,
    eventOrganization: document.getElementById('eventOrg').value,
  }

  const requestURL = eventRequestURLEndpoint

  const createOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(eventInfo)
  }
  
  let response = await fetch(requestURL, createOptions)

  location.reload(true)
}

async function retrieveUpdateCalEvent (eventId) {
  const requestURL = eventRequestURLEndpoint

  // append the eventId to the end of the event endpoint to retrieve a single event by id
  let response = await fetch(requestURL + '/' + eventId)
  let calEvent = await response.json()

  showUpdateEventMenu(calEvent)
}

// check to see if the 'Edit Event' menu is showing, if yes, then update that menu
// if it is not showing, create it and display the event
function showUpdateEventMenu (calEvent) {

  const calUpdateMenuDiv = document.getElementById('calUpdateMenuDiv')

  if (calUpdateMenuDiv === null) {
    const hbCal = document.getElementById('hbCal')

    const calUpdateMenuDiv = document.createElement('div')
    calUpdateMenuDiv.id = 'calUpdateMenuDiv'

    const calUpdateMenuDivTitle = document.createElement('h1')
    calUpdateMenuDivTitle.innerHTML = 'Edit Event'

    const calUpdateMenuForm = document.createElement('form')
    calUpdateMenuForm.id = 'calUpdateMenuForm'

    const eventCategoryInput = document.createElement('input')
    eventCategoryInput.id = 'eventCategoryInput'
    eventCategoryInput.name = 'eventCategoryInput'
    const eventCategoryInputLabel = document.createElement('label')
    eventCategoryInputLabel.htmlFor = 'eventCategoryInput'
    eventCategoryInputLabel.innerHTML = 'Category: '

    const eventTitleInput = document.createElement('input')
    eventTitleInput.id = 'eventTitleInput'
    eventTitleInput.name = 'eventTitleInput'
    const eventTitleInputLabel = document.createElement('label')
    eventTitleInputLabel.htmlFor = 'eventTitleInput'
    eventTitleInputLabel.innerHTML = 'Title: '

    const eventTypeInput = document.createElement('input')
    eventTypeInput.id = 'eventTypeInput'
    eventTypeInput.name = 'eventTypeInput'
    const eventTypeInputLabel = document.createElement('label')
    eventTypeInputLabel.htmlFor = 'eventTypeInput'
    eventTypeInputLabel.innerHTML = 'Type: '

    const eventOrgInput = document.createElement('input')
    eventOrgInput.id = 'eventOrgInput'
    eventOrgInput.name = 'eventOrgInput'
    const eventOrgInputLabel = document.createElement('label')
    eventOrgInputLabel.htmlFor = 'eventOrgInput'
    eventOrgInputLabel.innerHTML = 'Organization: '

    const eventStartDateInput = document.createElement('input')
    eventStartDateInput.id = 'eventStartDateInput'
    eventStartDateInput.name = 'eventStartDateInput'
    const eventStartDateInputLabel = document.createElement('label')
    eventStartDateInputLabel.htmlFor = 'eventStartDateInput'
    eventStartDateInputLabel.innerHTML = 'StartDate: '


    const eventEndDateInput = document.createElement('input')
    eventEndDateInput.id = 'eventEndDateInput'
    eventEndDateInput.name = 'eventEndDateInput'
    const eventEndDateInputLabel = document.createElement('label')
    eventEndDateInputLabel.htmlFor = 'eventEndDateInput'
    eventEndDateInputLabel.innerHTML = 'EndDate: '

    const eventLocationInput = document.createElement('input')
    eventLocationInput.id = 'eventLocationInput'
    eventLocationInput.name = 'eventLocationInput'
    const eventLocationInputLabel = document.createElement('label')
    eventLocationInputLabel.htmlFor = 'eventLocationInput'
    eventLocationInputLabel.innerHTML = 'Location: '

    calUpdateMenuForm.appendChild(eventCategoryInputLabel)
    calUpdateMenuForm.appendChild(eventCategoryInput)

    calUpdateMenuForm.appendChild(eventTitleInputLabel)
    calUpdateMenuForm.appendChild(eventTitleInput)

    calUpdateMenuForm.appendChild(eventTypeInputLabel)
    calUpdateMenuForm.appendChild(eventTypeInput)

    calUpdateMenuForm.appendChild(eventOrgInputLabel)
    calUpdateMenuForm.appendChild(eventOrgInput)

    calUpdateMenuForm.appendChild(eventStartDateInputLabel)
    calUpdateMenuForm.appendChild(eventStartDateInput)

    calUpdateMenuForm.appendChild(eventEndDateInputLabel)
    calUpdateMenuForm.appendChild(eventEndDateInput)

    calUpdateMenuForm.appendChild(eventLocationInputLabel)
    calUpdateMenuForm.appendChild(eventLocationInput)

    // add a button to update the changes
    const eventUpdateButton = document.createElement('input')
    eventUpdateButton.type = 'button'
    eventUpdateButton.id = 'eventUpdateButton'
    eventUpdateButton.value = 'Update'
    eventUpdateButton.onclick = function () { updateCalEvent(calEvent.event._id) }

    // add a button to reload the page, this will close the event edit dialog
    const pageReloadButton = document.createElement('input')
    pageReloadButton.type = 'button'
    pageReloadButton.id = 'reloadPageBtn'
    pageReloadButton.value = 'Close'
    pageReloadButton.onclick = function () { location.reload(true) }

    calUpdateMenuForm.appendChild(eventUpdateButton)
    calUpdateMenuForm.appendChild(pageReloadButton)

    calUpdateMenuDiv.appendChild(calUpdateMenuDivTitle)
    calUpdateMenuDiv.appendChild(calUpdateMenuForm)

    hbCal.appendChild(calUpdateMenuDiv)

    // add date pickers to the date selection areas in the 'edit event' dialog
    const calEventStartDateInput = datepicker(eventStartDateInput, {
      formatter: (input, date, instance) => {
        const value = date.toISOString().slice(0,10)
        eventStartDateInput.value = value
      }
    })
    const calEventEndDateInput = datepicker(eventEndDateInput, {
      formatter: (input, date, instance) => {
        const value = date.toISOString().slice(0,10)
        eventEndDateInput.value = value
      }
    })
  }

  updateEditMenu(calEvent)
}

// retrieve the id of the form elements to update
// update them with the event's information
function updateEditMenu (calEvent) {

  const eventCategoryInput = document.getElementById('eventCategoryInput')
  const eventTitleInput = document.getElementById('eventTitleInput')
  const eventTypeInput = document.getElementById('eventTypeInput')
  const eventStartDateInput = document.getElementById('eventStartDateInput')
  const eventEndDateInput = document.getElementById('eventEndDateInput')
  const eventLocationInput = document.getElementById('eventLocationInput')
  const eventOrganizationInput = document.getElementById('eventOrgInput')

  // also update the 'update' button
  const eventUpdateButton = document.getElementById('eventUpdateButton')

  eventCategoryInput.value = calEvent.category
  eventTitleInput.value = calEvent.summary
  eventTypeInput.value = calEvent.type
  eventStartDateInput.value = moment(calEvent.dtstart).utc().startOf('days').format('YYYY-MM-DD')
  eventEndDateInput.value = moment(calEvent.dtend).utc().startOf('days').format('YYYY-MM-DD')
  eventLocationInput.value = calEvent.location
  // temporary fix
  eventOrganizationInput.value = calEvent.organization[0].name || ''

  eventUpdateButton.onclick = function () { updateCalEvent(calEvent._id) }

}

async function updateCalEvent (eventId) {
  // populate an 'update' menu, display the menu
  // commit changes when 'update' button is pressed
  const eventInfo = {
    eventId: eventId,
    eventCategory: document.getElementById('eventCategoryInput').value,
    eventTitle: document.getElementById('eventTitleInput').value,
    eventType: document.getElementById('eventTypeInput').value,
    eventStartDate: document.getElementById('eventStartDateInput').value,
    eventEndDate: document.getElementById('eventEndDateInput').value,
    eventLocation: document.getElementById('eventLocationInput').value,
  }

  const requestURL = eventRequestURLEndpoint

  const editOptions = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(eventInfo)
  }
  
  let response = await fetch(requestURL, editOptions)

  location.reload(true)
}

async function createOrganization () {
  const orgInfo = {
    name: document.getElementById('orgName').value,
    type: document.getElementById('orgType').value,
    organizationDateCreated: document.getElementById('organizationDateCreated').value,
    orgShortId: document.getElementById('orgShortId').value,
  }

  // replace with 
  const requestURL = "http://localhost:3000/api/organization"

  const createOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(orgInfo)
  }
  
  let response = await fetch(requestURL, createOptions)

  location.reload(true)
}

</script>

<%- hbCalTable %>
<div id='calendar'></div>

