<% //debugger %>
<%

function drawHeaderRow (calStartDate, calEndDate, cellWidth) {
  // assign the day values of the weekday to print them on the table header
  var weekday = ['S', 'M', 'T', 'W', 'T', 'F', 'S']
  var headerRow = ''
  headerRow += '<tr>'

  headerRow += '<th class="hb_header" data-category="top column" style="width: ' + cellWidth * 2 + 'px;">\n'
  // headerRow += '<th class="hb_header" colspan="2" data-category="top column" style="">\n'
  headerRow += 'Category\n'
  headerRow += '</th>\n'

  // draw additional columns, will be end date - start date columns wide
  for (var m = new Moment(calStartDate).startOf('days'); m.diff(calEndDate, 'days') <= 0; m.add(1, 'days')) {
    // for the header row, display the date number and the day of the week
    var d = m.date()
    var n = weekday[m.day()]
    var curDay = Moment().startOf('days')

    // highlight the current day in the top
    var cellStyle = ''
    if (m.isSame(curDay, 'days')) {
      cellStyle += 'background-color: #AAAAAA;'
    }

    headerRow += '<th class="hb_header" data-date="' + m.format('YYYY-MM-DD') + '" style="width: ' + cellWidth + 'px; ' + cellStyle + '">\n'
    // headerRow += '<th class="hb_header" data-date="' + m.format('YYYY-MM-DD') + '" style="' + cellStyle + '">\n'
    headerRow += d + ' ' + n + '\n'
    headerRow += '</th>\n'
  }

  headerRow += '</tr>'
  return headerRow
}

function drawCategoryRow (rowName) {
  // add the left most cell, this is the event category
  var emptyRow = ''
  var curDay = new Moment().startOf('days')
  emptyRow += '<tr data-resource-id="' + rowName + '">'
  emptyRow += '<td style="width: ' + cellWidth * 2 + 'px;">\n'
  // emptyRow += '<td colspan="2" style="">\n'
  emptyRow += rowName
  emptyRow += '</td>\n'

  for (var m = new Moment(calStartDate).startOf('days'); m.diff(calEndDate, 'days') <= 0; m.add(1, 'days')) {
    var cellStyle = ''
    if (m.isSame(curDay, 'day')) {
      cellStyle += 'background-color: #AAAAAA;'
    }
    // write a cell and move on
    emptyRow += '<td colspan="1" data-date="' + m.format('YYYY-MM-DD') + '" style="width: ' + cellWidth + 'px; ' + cellStyle + '">\n'
    // emptyRow += '<td colspan="1" data-date="' + m.format('YYYY-MM-DD') + '" style="' + cellStyle + '">\n'
    emptyRow += '</td>\n'
  }
  // done with the m day iteration, add ending values to the row and then return the row value
  emptyRow += '</tr>'
  return emptyRow
}

function drawEvent (event, tableEventCategories) {
  // for each event retrieved from the database, draw them on the table
  // events should be drawn in the proper location for the proper row
  // determine top offsets for the rows
  // determine how far over to draw the events

  // TODO determine if the event is outside of the calendar start and end dates, do not display if outside this range
  var eventCell = ''
  var eventCellOffset = ''
  var eventStartDate = new Moment(event.eventStartDate)
  var eventEndDate = new Moment(event.eventEndDate)

  var eventLength = eventEndDate.diff(eventStartDate, 'days') + 1
  var viewLength = calEndDate.diff(eventStartDate, 'days') + 1
  var dispLength = Math.min(eventLength, viewLength)

  var eventCellWidth = dispLength * cellWidth

  // TODO need to properly adjust the height of the cell as well as the width of the cell

  var eventOffset = eventStartDate.diff(calStartDate, 'days') + 1

  eventCellOffset = (cellWidth * 2) + (cellWidth * eventOffset)

  // calculate the vertical distance for the event, use the tableEventCategories array
  // event.eventCategory with a lower index value in the array will be higher on the screen
  var verticalOffset = tableEventCategories.indexOf(event.eventCategory)
  var verticalValue = 20
  var topOffset = 200 + verticalOffset * verticalValue

  // event_cell += '<div style="position: absolute; width: ' + event_cell_width +'px; height: 20px; left: REPLACE WITH HOW FAR LEFT; top: REPLACE WITH HOW FAR FROM TOP;';
  eventCell += '<div class="' + event.eventType + '" style="text-align: center; position: absolute; width: ' + eventCellWidth + 'px; height: 20px; left: ' + eventCellOffset + 'px; top: ' + topOffset + 'px; border: 1px solid black;" >'
  //eventCell += '<td class="' + event.eventType + '" colspan = "' + dispLength + '" style="width: ' + cellWidth * dispLength + 'px; height: 30px; border: 1px solid black;">\n'
  eventCell += '<form name="delevent" method="post" action="./delevent"><input type="hidden" name="documentid" '
  eventCell += 'value="' + event._id + '"><button class="linkButton" type="submit">'
  eventCell += event.eventSummary
  eventCell += '</button></form>\n'
  //eventCell += '</td>\n'
  eventCell += '</div>\n'

  return eventCell
}

function drawCalendar (calStartDate, calEndDate, cellWidth) {
  var tableWidth = cellWidth * (calEndDate.diff(calStartDate, 'days') + 3)

  var cal = '<div class="hb_cal">\n'
  cal += '<table id="hbOuterTable" class="hbTable" style="width: ' + tableWidth + 'px; table-layout: fixed; border: 1px solid black;">\n'

  // add the header row in here
  cal += drawHeaderRow(calStartDate, calEndDate, cellWidth)

  // now make a new row to include all of the eventCategory rows
  cal += '<tr>\n'

  var tableEventCategories = []

  // loop through the categories to add a row for each category on the table, use the 'drawCategoryRow' function to add a row to the html table
  for (var catIter = 0; catIter < hbEvents[0].length; catIter++) {
    if (!tableEventCategories.includes(hbEvents[0][catIter].eventCategory)) {
      tableEventCategories.push(hbEvents[0][catIter].eventCategory)
      cal += drawCategoryRow(hbEvents[0][catIter].eventCategory)
    }
  }

  cal += '</tr>\n'
  cal += '</table>\n'

  var eventCell = ''
  for (var eventIter = 0; eventIter < hbEvents[0].length; eventIter++) {
    eventCell += drawEvent(hbEvents[0][eventIter], tableEventCategories)
  }

  cal += eventCell
  cal += '</div>'
  return cal
}

// START OF EXECUTION 
// check for cookie values to set an arbitrary start and stop date, and cell_width
try {
  var calStartDate = new Moment(calView.startDate).startOf('day')
  if (!calStartDate.isValid()) throw new Error('Invalid Date: calStartDate')
  if (calView.startDate === undefined) throw new Error('startDate undefined')
} catch (err) {
  calStartDate = new Moment().startOf('day')
}

try {
  var calEndDate = new Moment(calView.endDate).startOf('day')
  if (!calEndDate.isValid()) throw new Error('Invalid Date: calEndDate')
  if (calView.endDate === undefined) throw new Error('endDate undefined')
  if (calEndDate.isSame(calStartDate)) throw new Error('endDate same as startDate')
} catch (err) {
  calEndDate = calStartDate.clone().add(30, 'days')
}

try {
  var cellWidth = calView.cellWidth
  if (cellWidth === undefined) throw new Error('cellWidth is undefined')
  if (isNaN(cellWidth)) throw new Error('cellWidth is NaN')
  if (cellWidth === '') throw new Error('cell_width is empty')
} catch (err) {
  cellWidth = 50
}

var curCat = ''
var prevCat = ''
var hbCatIndex = 0
// make an array of the events that are passed, group the events by category
var hbEvents = []
hbEvents[hbCatIndex] = []

// events are retrieved from the database in category and then date order
// this is no longer the case, the events are not necessarily stored in this way
// iterate through all of the events and put them in the array
for (var i = 0; i < events.events.length; i++) {
  curCat = events.events[i].category

  // check if the categories are different AND the iterator is not the first event, then make a new row
  if (curCat !== prevCat && i !== 0) {
    hbCatIndex++
    hbEvents[hbCatIndex] = []
  }

  hbEvents[hbCatIndex].push(events.events[i])

  // at the end of the loop, update prev_cat with the value of cur_cat
  prevCat = curCat

  var hbCalTable = drawCalendar(calStartDate, calEndDate, cellWidth)
}

%>
<%- hbCalTable %>
