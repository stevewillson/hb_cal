<% //debugger; %>
<%
  var weekday = new Array(7);
  weekday[0] = "S";
  weekday[1] = "M";
  weekday[2] = "T";
  weekday[3] = "W";
  weekday[4] = "T";
  weekday[5] = "F";
  weekday[6] = "S";

  var hb_cal_table = '';
  var datepicker = '';

  var cur_day = moment();

  // check for cookie values to set an arbitrary start and stop date, and cell_width
  try {
    var cal_date_begin = moment(cal_view.beginDate);
    if (!cal_date_begin.isValid()) throw "Invalid Date: cal_date_begin"
    if ( cal_view.beginDate === undefined ) throw "beginDate undefined";
  }
  catch(err){
    var cal_date_begin = moment();
  }

  try {
    var cal_date_end = moment(cal_view.endDate);
    if (!cal_date_end.isValid()) throw "Invalid Date: cal_date_end"
    if ( cal_view.endDate === undefined ) throw "endDate undefined";
    if ( cal_date_end.isSame(cal_date_begin)) throw "endDate same as beginDate";
  }
  catch(err){
    var cal_date_end = cal_date_begin.clone().add(30, 'days');
  }

  try {
    var cell_width = cal_view.cell_width;
    if ( cell_width === undefined ) throw "cell_width is undefined";
    if ( cell_width === NaN ) throw "cell_width is NaN";
    if ( cell_width == '' ) throw "cell_width is empty";
  }
  catch(err){
    var cell_width = 50;
  }

  datepicker += '<form id="formDatePicker" name="datepicker" method="post" action="./" enctype="application/x-www-form-urlencoded" >\n'
  datepicker += 'Date Start: <input id="inputDateBegin" type="text" value="' + cal_date_begin.format("YYYY-MM-DD") + '" name="datebegin" />\n'
  datepicker += 'Date End: <input id="inputDateEnd" type="text" value="' + cal_date_end.format("YYYY-MM-DD") + '" name="dateend" />\n'
  datepicker += 'Cell Width: <input id="inputCellWidth" type="text" value="' + cell_width.toString() + '" name="cell_width" />\n'
  datepicker += '<button id="btnSubmit" type="submit">Update</button>\n'
  datepicker += '</form>'

  hb_cal_table = '<div class="hb_cal">';

  var table_width = cell_width * ( cal_date_end.diff(cal_date_begin, 'days') + 2);
  hb_cal_table += '<table id="hb_table" class="hb_table" style="width: '+ table_width +'px; table-layout: fixed;">';

  var header_row = '';
  header_row += '<tr>';

  // make the first column 
  header_row += '<th class="hb_header" data-category="top column" style="width: ' + cell_width * 2 + 'px;">\n';
  header_row += 'Category\n';
  header_row += '</th>\n';

  // draw additional columns, will be end date - start date columns wide
  for (var m = moment(cal_date_begin); m.diff(cal_date_end, 'days') <= 0; m.add(1, 'days')) {

    // for the header row, display the date number and the day of the week
    var d = m.date()
    var n = weekday[m.day()];

    // highlight the current day in the top
    var cell_style = ''
    if (m.isSame(cur_day, 'day')) {
      cell_style += "background-color: #AAAAAA;";
    }

    header_row += '<th class="hb_header" data-date="' + m.format('YYYY-MM-DD') + ' style="width: ' + cell_width + 'px;" style="' + cell_style +'">\n';
    header_row += d + ' ' + n + '\n';
    header_row += '</th>\n';;
  }

  header_row += '</tr>';

  hb_cal_table += header_row;

  var row = '';
  
  // make a new row for each category

  // events are retrieved from the database in category and then date order
	for (i = 0; i < events.length; i++) {

    // go through for each event in a category, if a new category, then add a new row

    try {
      var cur_cat = events[i].category;
      if ( cur_cat == "" ) throw "Category is empty"
      var event_date_start = moment(events[i].date_start, "YYYY-MM-DD");
      if (!event_date_start.isValid()) throw "Invalid Date: event_date_start"
      var event_date_end = moment(events[i].date_end, "YYYY-MM-DD");
      if (!event_date_end.isValid()) throw "Invalid Date: event_date_end"
      var event_name = events[i].event;
      var event_type = events[i].eventtype;
      if ( event_type == "" ) throw "Event type is empty"
    }
    catch(err){
      // some part of the event wasn't right, move on to the next event
      console.log("ERROR: " + err + " Moving to next event.");
      i = i + 1;
      continue;
    }

    try {
      var prev_cat = events[i-1].category
    }
    catch(err){
      var prev_cat = "undefined";
    }
    try {
      var next_cat = events[i+1].category
    }
    catch(err){
      var next_cat = "undefined";
    }

    // set the rightmost column, should be set when a new row is generated
    if (cur_cat != prev_cat) {
      // new category, start a new row
      row += '<tr data-resource-id="' + events[i].category + '">';
      row += '<td style="width: ' + cell_width * 2 + 'px;">\n';
      row += events[i].category;
      row += '</td>\n';
    }

    // draw one row, if the category changes, finish out this row and then advance to the next row
    // loop through the date range and draw calendar events that are in the cur_category
    for (var m = moment(cal_date_begin); m.diff(cal_date_end, 'days') <= 0; m.add(1, 'days')) {

      // calculate the start day of the event
      var event_date_start = moment(events[i].date_start, "YYYY-MM-DD");

      // if the event starts in the past, advance on to the next event until it either starts today, or is in the future
      // if the below comparison is positive, then the event started in the past, do not print
      // can think of this by replacing 'diff' with the '-' operator
      // m.diff(event_date_start, 'days') > 0 means that m is more recent than the start date

      // while the event doesn't start in the past according to the calendar view, go through the events, check that the category is the same, if it differs, then finish out the row
      while ( m.diff(event_date_start, 'days') > 0 && moment(cal_date_begin).diff(event_date_start, 'days') > 0 ) {
        // if the next event has the same category, it may need to be drawn on the same row
        if(cur_cat == next_cat) {
          try {
            var next_cat = events[i+1].category
          }
          catch(err){
            var next_cat = "undefined";
          }
        } else {
          // the categories differ, draw out the rest of the cells in this row
          while ( m.diff(cal_date_end, 'days') <= 0 ) {
            // highlight the current day if the event doesn't start this day
            var cell_style = ''
            if (m.isSame(cur_day, 'day')) {
              cell_style += "background-color: #AAAAAA;";
            }
            // write a cell and move on
            row += '<td colspan = "1" '  + 'px;" data-date="' + m.format('YYYY-MM-DD') + '" style="width: ' + cell_width + 'px; ' + cell_style +'">\n';
            //row += j + '\n';
            row += '</td>\n';

            m.add(1, 'days');

          }
          // once the columns finish out the row, then terminate the row and add to the hb_cal_table
          row += '</tr>';
          hb_cal_table += row;
          row = '';
          continue;
        }

        // adjust the date so that when the new iteration occurs, it will be the same date
        m.subtract(1, 'days');
        continue;
      }

      // check if the event starts on this day
      if ( !m.isSame(event_date_start, 'days')) {

        // highlight the current day if the event doesn't start this day
        var cell_style = ''
        if (m.isSame(cur_day, 'day')) {
          cell_style += "background-color: #AAAAAA;";
        }
        // start date isn't the same as the current date, write a cell and move on
        row += '<td colspan = "1" '  + 'px;" data-date="' + m.format('YYYY-MM-DD') + '" style="width: ' + cell_width + 'px; ' + cell_style +'">\n';
        //row += j + '\n';
        row += '</td>\n';

      } else {
        // the event starts at the current m day

        var event_date_end = moment(events[i].date_end, "YYYY-MM-DD");

        // make sure the event doesn't go off of the cal_end_date

        event_length = event_date_end.diff(event_date_start, 'days') + 1;
        view_length = cal_date_end.diff(event_date_start, 'days') + 1;
        
        disp_length = Math.min(event_length, view_length);

        row += '<td class = "' + events[i].eventtype + '" colspan = "' + disp_length + '" style="width: ' + cell_width*disp_length + 'px; height: 30px; border: 1px solid black;">\n';

        // update the iterator with how long the event occurred
        m.add(disp_length - 1, 'days');
        row += '<form name="delevent" method="post" action="./delevent"><input type="hidden" name="documentid" ';
        row += 'value="' + events[i]._id + '"><button class="linkButton" type="submit">';
        row += events[i].event;
        row += '</button></form>';

        // look ahead to the next event in the category, this allows events for the same category to exist on the same row, there can be only one event per category per day
        if(cur_cat == next_cat) {
          i = i + 1;
          // update prev_cat, cur_cat and next_cat
          try {
            var prev_cat = events[i-1].category;
          }
          catch(err){
            var prev_cat = "undefined";
          }
          try {
            var cur_cat = events[i].category;
          }
          catch(err){
            var cur_cat = "undefined";
          }
          try {
            var next_cat = events[i+1].category
          }
          catch(err){
            var next_cat = "undefined";
            // this is the last event from the database, no more events need to be added
          }
        }
        row += '</td>\n';
      }
	  }
    // check to see if the updated cur_cat is the same as the prev_cat
    //if (cur_cat != prev_cat) {
    if (m.diff(cal_date_end, 'days') <= 0) {
      // new category, finish the row
      // reached the end of the row, terminate the row and append to the hb_cal_table
      row += '</tr>';
      hb_cal_table += row;
      row = '';
    }
	}

  //hb_cal_table += row;
  hb_cal_table += '</table>';
  hb_cal_table += '</div>';

  %>

  <%- datepicker %>
  <%- hb_cal_table %>
