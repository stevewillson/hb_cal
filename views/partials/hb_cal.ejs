<%

// START OF SCRIPT EXECUTION
// check for cookie values to set an arbitrary start date, stop date, and cellWidth
try {
  var calStartDate = new Moment(calView.startDate).startOf('day')
  if (!calStartDate.isValid()) throw new Error('Invalid Date: calStartDate')
  if (calView.startDate === undefined) throw new Error('startDate undefined')
} catch (err) {
  calStartDate = new Moment().startOf('day')
}

try {
  var calEndDate = new Moment(calView.endDate).startOf('day')
  if (!calEndDate.isValid()) throw new Error('Invalid Date: calEndDate')
  if (calView.endDate === undefined) throw new Error('endDate undefined')
  if (calEndDate.isSame(calStartDate)) throw new Error('endDate same as startDate')
} catch (err) {
  calEndDate = calStartDate.clone().add(30, 'days')
}

try {
  var cellWidth = calView.cellWidth
  if (cellWidth === undefined) throw new Error('cellWidth is undefined')
  if (isNaN(cellWidth)) throw new Error('cellWidth is NaN')
  if (cellWidth === '') throw new Error('cellWidth is empty')
} catch (err) {
  cellWidth = 50
}

%>
<script>

// CLIENT SIDE CODE EXECUTION
// eventRequestURLEndpoint passed in through the 'render', defined in config.js file
var eventRequestURLEndpoint = "<%= eventRequestURLEndpoint %>"
var orgRequestURLEndpoint = "<%= orgRequestURLEndpoint %>"

// code to load the full calendar after the page loads
document.addEventListener('DOMContentLoaded', () => {
  var calCategoryRows = []
  var fullCalEvents = []
  readCalEvents().then((events) => {
    let categories = []
    let iter = 'a'
    for (let event of events) {
      if (!categories.includes(event.category)) {
        categories.push(event.category)
      }
      fullCalEvents.push({ id: event._id, resourceId: event.category, title: event.summary, start: moment(event.dtstart).startOf('days').utc().format('YYYY-MM-DD'), end: moment(event.dtend).startOf('days').utc().format('YYYY-MM-DD')})
      iter = String.fromCharCode(iter.charCodeAt(0) + 1)
    }
    for (let category of categories) {
      calCategoryRows.push({ id: category, title: category })
    }

    // when reading from the calendar end day, set the proper end day. Need to add 1 day to adjust?
    var endDay = moment(document.getElementById('inputEndDate').value).add(1,'days').utc().format('YYYY-MM-DD')

    var calendarEl = document.getElementById('calendar')
    var calendar = new FullCalendar.Calendar(calendarEl, {
      plugins: [ 'interaction', 'resourceTimeline' ],
      timeZone: 'UTC', 
      header: {
        right: 'hbSpecifiedView,resourceTimelineMonth'
      },
      resourceColumns: [
			{
				width: document.getElementById('inputCellWidth')
			}
			],
      defaultView: 'hbSpecifiedView',
      views: {
        hbSpecifiedView: {
          type: 'resourceTimeline',
          visibleRange: {
            start: document.getElementById('inputStartDate').value,
            end: endDay,
            slotDuration: '24:00:00',
            scrollTime: '00:00:01',
          }
        }
      },
      editable: true,
      // populate the resources with the list of categories for the events
      resources: calCategoryRows,
      events: fullCalEvents,
      contentHeight: "auto",
      eventClick: function(info) {
        retrieveUpdateCalEvent(info.event.id)
      },
      eventResize: (info) => {
				console.log(info.event.start)
				console.log(info.event.end)
				console.log(info.event.id)
				updateCalEventTime(info.event.id, info.event.start.toISOString().slice(0,10), info.event.end.toISOString().slice(0,10))
      },
      eventDrop: (info) => {
				console.log(info.event.start)
				console.log(info.event.end)
				console.log(info.event.id)
				let resource = info.event.getResources()
				let resourceId = resource.map(function(resource) { return resource.id })
				updateCalEventDrag(info.event.id, info.event.start.toISOString().slice(0,10), info.event.end.toISOString().slice(0,10), resourceId[0])
      },
    })
    calendar.updateSize()
    calendar.render()
  })
})

// TODO move to generate the calendar client side so there is only 1 request to the api/event endpoint
// if I generate the calendar after the api request, now move to add more functionality, can I resize the event columns to accomodate the events?


/* CODE TO ADD UPDATE AND DELETE BUTTONS
  eventTextContent += '<form name="formUpdateCalEvent" style="display: inline;" >\n'
  eventTextContent += '</form>\n'
  eventTextContent += '<form name="formDeleteCalEvent" style="display: inline;" >\n'
  eventTextContent += '<input type="button" class="linkButton" onclick="deleteCalEvent(\'' + id + '\')" value="Del" \\>\n'
  eventTextContent += '</form>\n'
*/

// FUNCTIONS FOR INTERACTING WITH ENDPOINTS

// read events from the database once the page loads
async function readCalEvents () {
  // use the 'fetch' method to read the information
  const requestURL = eventRequestURLEndpoint
  let response = await fetch(requestURL)
  let calEvents = await response.json()
  return calEvents
}

async function deleteCalEvent (eventId) {
  const requestURL = eventRequestURLEndpoint

  const delEventId = { documentid: eventId }

  const delOptions = {
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(delEventId)
  }
  
  let response = await fetch(requestURL, delOptions)

  // find a way to remove just the event from the table so the entire table doesn't need to be redrawn
  location.reload(true)
}

async function createCalEvent () {
  const eventInfo = {
    eventCategory: document.getElementById('eventCategory').value,
    eventTitle: document.getElementById('eventTitle').value,
    eventType: document.getElementById('eventType').value,
    eventStartDate: document.getElementById('createCalEventStartDate').value,
    eventEndDate: document.getElementById('createCalEventEndDate').value,
    eventLocation: document.getElementById('eventLocation').value,
    eventOrganization: document.getElementById('eventOrg').value,
  }

  const requestURL = eventRequestURLEndpoint

  const createOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(eventInfo)
  }
  
  let response = await fetch(requestURL, createOptions)

  location.reload(true)
}

//TODO CLEAN UP THE CALENDAR EVENT EDITING FUNCTIONALITY
async function retrieveUpdateCalEvent (eventId) {
  const requestURL = eventRequestURLEndpoint

  // append the eventId to the end of the event endpoint to retrieve a single event by id
  let response = await fetch(requestURL + '/' + eventId)
  let calEvent = await response.json()

  showUpdateEventMenu(calEvent)
}

// check to see if the 'Edit Event' menu is showing, if yes, then update that menu
// if it is not showing, create it and display the event
function showUpdateEventMenu (calEvent) {

  const calUpdateMenuDiv = document.getElementById('calUpdateMenuDiv')

  if (calUpdateMenuDiv === null) {
    const hbCal = document.getElementById('calendar')

    const calUpdateMenuDiv = document.createElement('div')
    calUpdateMenuDiv.id = 'calUpdateMenuDiv'

    const calUpdateMenuDivTitle = document.createElement('h1')
    calUpdateMenuDivTitle.innerHTML = 'Edit Event'

    const calUpdateMenuForm = document.createElement('form')
    calUpdateMenuForm.id = 'calUpdateMenuForm'

    const eventCategoryInput = document.createElement('input')
    eventCategoryInput.id = 'eventCategoryInput'
    eventCategoryInput.name = 'eventCategoryInput'
    const eventCategoryInputLabel = document.createElement('label')
    eventCategoryInputLabel.htmlFor = 'eventCategoryInput'
    eventCategoryInputLabel.innerHTML = 'Category: '

    const eventTitleInput = document.createElement('input')
    eventTitleInput.id = 'eventTitleInput'
    eventTitleInput.name = 'eventTitleInput'
    const eventTitleInputLabel = document.createElement('label')
    eventTitleInputLabel.htmlFor = 'eventTitleInput'
    eventTitleInputLabel.innerHTML = 'Title: '

    const eventTypeInput = document.createElement('input')
    eventTypeInput.id = 'eventTypeInput'
    eventTypeInput.name = 'eventTypeInput'
    const eventTypeInputLabel = document.createElement('label')
    eventTypeInputLabel.htmlFor = 'eventTypeInput'
    eventTypeInputLabel.innerHTML = 'Type: '

    const eventOrgInput = document.createElement('input')
    eventOrgInput.id = 'eventOrgInput'
    eventOrgInput.name = 'eventOrgInput'
    const eventOrgInputLabel = document.createElement('label')
    eventOrgInputLabel.htmlFor = 'eventOrgInput'
    eventOrgInputLabel.innerHTML = 'Organization: '

    const eventStartDateInput = document.createElement('input')
    eventStartDateInput.id = 'eventStartDateInput'
    eventStartDateInput.name = 'eventStartDateInput'
    const eventStartDateInputLabel = document.createElement('label')
    eventStartDateInputLabel.htmlFor = 'eventStartDateInput'
    eventStartDateInputLabel.innerHTML = 'StartDate: '


    const eventEndDateInput = document.createElement('input')
    eventEndDateInput.id = 'eventEndDateInput'
    eventEndDateInput.name = 'eventEndDateInput'
    const eventEndDateInputLabel = document.createElement('label')
    eventEndDateInputLabel.htmlFor = 'eventEndDateInput'
    eventEndDateInputLabel.innerHTML = 'EndDate: '

    const eventLocationInput = document.createElement('input')
    eventLocationInput.id = 'eventLocationInput'
    eventLocationInput.name = 'eventLocationInput'
    const eventLocationInputLabel = document.createElement('label')
    eventLocationInputLabel.htmlFor = 'eventLocationInput'
    eventLocationInputLabel.innerHTML = 'Location: '

    calUpdateMenuForm.appendChild(eventCategoryInputLabel)
    calUpdateMenuForm.appendChild(eventCategoryInput)

    calUpdateMenuForm.appendChild(eventTitleInputLabel)
    calUpdateMenuForm.appendChild(eventTitleInput)

    calUpdateMenuForm.appendChild(eventTypeInputLabel)
    calUpdateMenuForm.appendChild(eventTypeInput)

    calUpdateMenuForm.appendChild(eventOrgInputLabel)
    calUpdateMenuForm.appendChild(eventOrgInput)

    calUpdateMenuForm.appendChild(eventStartDateInputLabel)
    calUpdateMenuForm.appendChild(eventStartDateInput)

    calUpdateMenuForm.appendChild(eventEndDateInputLabel)
    calUpdateMenuForm.appendChild(eventEndDateInput)

    calUpdateMenuForm.appendChild(eventLocationInputLabel)
    calUpdateMenuForm.appendChild(eventLocationInput)

    // add a button to update the changes
    const eventUpdateButton = document.createElement('input')
    eventUpdateButton.type = 'button'
    eventUpdateButton.id = 'eventUpdateButton'
    eventUpdateButton.value = 'Update'
    eventUpdateButton.onclick = function () { updateCalEvent(calEvent._id) }

    // add a button to reload the page, this will close the event edit dialog
    const pageReloadButton = document.createElement('input')
    pageReloadButton.type = 'button'
    pageReloadButton.id = 'reloadPageBtn'
    pageReloadButton.value = 'Close'
    pageReloadButton.onclick = function () { location.reload(true) }

    calUpdateMenuForm.appendChild(eventUpdateButton)
    calUpdateMenuForm.appendChild(pageReloadButton)

    calUpdateMenuDiv.appendChild(calUpdateMenuDivTitle)
    calUpdateMenuDiv.appendChild(calUpdateMenuForm)

    hbCal.appendChild(calUpdateMenuDiv)

    // add date pickers to the date selection areas in the 'edit event' dialog
    const calEventStartDateInput = datepicker(eventStartDateInput, {
      formatter: (input, date, instance) => {
        const value = date.toISOString().slice(0,10)
        eventStartDateInput.value = value
      }
    })
    const calEventEndDateInput = datepicker(eventEndDateInput, {
      formatter: (input, date, instance) => {
        const value = date.toISOString().slice(0,10)
        eventEndDateInput.value = value
      }
    })
  }

  updateEditMenu(calEvent)
}

// retrieve the id of the form elements to update
// update them with the event's information
function updateEditMenu (calEvent) {

  const eventCategoryInput = document.getElementById('eventCategoryInput')
  const eventTitleInput = document.getElementById('eventTitleInput')
  const eventTypeInput = document.getElementById('eventTypeInput')
  const eventStartDateInput = document.getElementById('eventStartDateInput')
  const eventEndDateInput = document.getElementById('eventEndDateInput')
  const eventLocationInput = document.getElementById('eventLocationInput')
  const eventOrganizationInput = document.getElementById('eventOrgInput')

  // also update the 'update' button
  const eventUpdateButton = document.getElementById('eventUpdateButton')

  eventCategoryInput.value = calEvent.category
  eventTitleInput.value = calEvent.summary
  eventTypeInput.value = calEvent.type
  eventStartDateInput.value = moment(calEvent.dtstart).utc().startOf('days').format('YYYY-MM-DD')
  eventEndDateInput.value = moment(calEvent.dtend).utc().startOf('days').format('YYYY-MM-DD')
  eventLocationInput.value = calEvent.location
  // temporary fix
  eventOrganizationInput.value = calEvent.organization[0].name || ''

  eventUpdateButton.onclick = function () { updateCalEvent(calEvent._id) }
}

async function updateCalEvent (eventId) {
  // populate an 'update' menu, display the menu
  // commit changes when 'update' button is pressed
  const eventInfo = {
    eventId: eventId,
    eventCategory: document.getElementById('eventCategoryInput').value,
    eventTitle: document.getElementById('eventTitleInput').value,
    eventType: document.getElementById('eventTypeInput').value,
    eventStartDate: document.getElementById('eventStartDateInput').value,
    eventEndDate: document.getElementById('eventEndDateInput').value,
    eventLocation: document.getElementById('eventLocationInput').value,
  }

  const requestURL = eventRequestURLEndpoint

  const editOptions = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(eventInfo)
  }
  
  let response = await fetch(requestURL, editOptions)

  location.reload(true)
}

async function updateCalEventTime (eventId, start, end) {

  const eventInfo = {
    eventId: eventId,
    eventStartDate: start,
    eventEndDate: end
	}
  const requestURL = eventRequestURLEndpoint

  const editOptions = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(eventInfo)
  }
  
  let response = await fetch(requestURL, editOptions)
}

async function updateCalEventDrag (eventId, start, end, category) {

  const eventInfo = {
    eventId: eventId,
    eventStartDate: start,
    eventEndDate: end,
    eventCategory: category
	}
  const requestURL = eventRequestURLEndpoint

  const editOptions = {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(eventInfo)
  }
  
  let response = await fetch(requestURL, editOptions)
}

async function createOrganization () {
  const orgInfo = {
    name: document.getElementById('orgName').value,
    type: document.getElementById('orgType').value,
    organizationDateCreated: document.getElementById('organizationDateCreated').value,
    orgShortId: document.getElementById('orgShortId').value,
  }

  // replace with 
  const requestURL = "http://localhost:3000/api/organization"

  const createOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(orgInfo)
  }
  
  let response = await fetch(requestURL, createOptions)

  location.reload(true)
}
</script>

<div id='calendar'></div>

