<%
  var weekday = new Array(7);
  weekday[0] = "S";
  weekday[1] = "M";
  weekday[2] = "T";
  weekday[3] = "W";
  weekday[4] = "T";
  weekday[5] = "F";
  weekday[6] = "S";

  var hb_cal_table = '';

  hb_cal_table = '<div class="hb_cal">';
  hb_cal_table += '<table id="hb_table" class="hb_table">';
  hb_cal_table += '<tr>';

  // TODO - accept values to set an arbitrary start and stop date
  var cal_date_start = moment("2019-08-02");
  var cal_date_end = moment("2019-08-31");

  // make the first column 
  hb_cal_table += '<th class="hb_header" data-category="top column">\n';
  hb_cal_table += 'Category\n';
  hb_cal_table += '</th>\n';;

  for (var m = moment(cal_date_start); m.diff(cal_date_end, 'days') <= 0; m.add(1, 'days')) {
    //console.log(m.format('YYYY-MM-DD'));

  // TODO - highlight the day of the month here

    var d = m.date()
    var n = weekday[m.day()];
    //console.log(d);
    //console.log(n);

    hb_cal_table += '<th class="hb_header" data-date="' + m.format('YYYY-MM-DD') + '">\n';
    hb_cal_table += d + ' ' + n + '\n';
    hb_cal_table += '</th>\n';;
  }

  hb_cal_table += '</tr>';
  
  // make a new row for each category
  var rows = '';
	for (i = 0; i < events.length; i++) {
    var cur_cat = events[i].category;
    //console.log("cur_cat is " + cur_cat);
    try {
      var prev_cat = events[i-1].category
      //console.log("prev_cat is " + prev_cat);
    }
    catch(err){
      var prev_cat = "undefined";
      //console.log("prev_cat is undefined");
    }
    try {
      var next_cat = events[i+1].category
      //console.log("next_cat is " + next_cat);
    }
    catch(err){
      var next_cat = "undefined";
      //console.log("next_cat is undefined");
    }

          if (cur_cat != prev_cat) {
            // new category, set a new row
            //console.log("cur_cat is " + cur_cat);
            //console.log("prev_cat is " + prev_cat);
            rows += '<tr data-resource-id="' + events[i].category + '">';
            rows += '<td>\n';
            rows += events[i].category;
            rows += '</td>\n';
          }

    for (var m = moment(cal_date_start); m.diff(cal_date_end, 'days') <= 0; m.add(1, 'days')) {

      // calculate the start of the day 
      var event_date_start = moment(events[i].date_start, "YYYY-MM-DD");

      if ( !m.isSame(event_date_start)) {
        // start date isn't the same as the current date, write a cell and move on
        rows += '<td colspan = "1">\n';
        //rows += j + '\n';
        rows += '</td>\n';
      } else {
        var event_date_end = moment(events[i].date_end, "YYYY-MM-DD");
        event_length = event_date_end.diff(event_date_start, 'days') + 1;
        console.log(event_length);

        rows += '<td class = "' + events[i].eventtype + '" colspan = "' + event_length + '" style="width: 30px; height: 30px; border: 1px solid black;">\n';

        // update the iterator with how long the event occurred
        m.add(event_length, 'days');
        rows += '<form name="delevent" method="post" action="/delevent"><input type="hidden" name="documentid" ';
        rows += 'value="' + events[i]._id + '"><button class="linkButton" type="submit">';
        rows += events[i].event;
        rows += '</button></form>';

        // move on to the next event, but only if cur_cat == next_cat
        //console.log("cur_cat is " + cur_cat);
        //console.log("next_cat is " + next_cat);
        //console.log("");

        // look ahead to the next event in the category, this allows events for the same category to exist on the same row
        if(cur_cat == next_cat) {
          i = i + 1;
          //console.log("event index is incremented");
          // update cur_cat and next_cat
          try {
            var cur_cat = events[i].category;
            //console.log("cur_cat is " + cur_cat);
          }
          catch(err){
            var cur_cat = "undefined";
          }
          try {
            var next_cat = events[i+1].category
            //console.log("next_cat is " + next_cat);
          }
          catch(err){
            var next_cat = "undefined";
            //console.log("next_cat is undefined");
          }
          //console.log("");
        }

        rows += '</td>\n';
      }
	  }
          
    if (cur_cat != prev_cat) {
      // new category, after finishing the row, finish the row
      rows += '</tr>';
    }
	}

  hb_cal_table += rows;
  hb_cal_table += '</table>';
  hb_cal_table += '</div>';

  %>

  <%- hb_cal_table %>
